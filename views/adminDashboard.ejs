<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <title>Dashboard Admin</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link href="/css/responsive-admin.css" rel="stylesheet">
    <style>
        body { background: #f5f6fa; }
        
        /* Mobile responsive fixes */
        @media (max-width: 767.98px) {
            .main-content {
                margin-top: 70px !important; /* Extra space for mobile navbar */
                padding-top: 10px !important;
                z-index: 1;
            }
            .card {
                z-index: 1;
            }
            /* Pastikan cards tidak overlap dengan mobile navbar */
            .row.mb-4:first-of-type {
                margin-top: 10px;
            }
            /* Responsive notification positioning */
            #restartNotif {
                top: 80px !important; /* Below mobile navbar */
                right: 10px !important;
                left: 10px !important;
                width: auto !important;
            }
        }
    </style>
</head>
<body>
<div class="container-fluid">
    <div class="row">
        <!-- Include Responsive Admin Sidebar -->
        <%- include('partials/admin-responsive-sidebar', { page: 'dashboard', settings: settings }) %>
        
        <main class="col-md-10 ms-sm-auto main-content">
            <!-- GENIEACS CARDS -->
            <div class="row mb-4">
              <div class="col-md-4 mb-3">
                <div class="card text-bg-primary">
                  <div class="card-body text-center">
                    <i class="bi bi-hdd-network fs-2 mb-2"></i>
                    <div class="fw-bold">Total Device GenieACS</div>
                    <div class="fs-3" id="genieacs-total"><%= typeof genieacsTotal !== 'undefined' ? genieacsTotal : '-' %></div>
                  </div>
                </div>
              </div>
              <div class="col-md-4 mb-3">
                <div class="card text-bg-success">
                  <div class="card-body text-center">
                    <i class="bi bi-wifi fs-2 mb-2"></i>
                    <div class="fw-bold">Device Online</div>
                    <div class="fs-3" id="genieacs-online"><%= typeof genieacsOnline !== 'undefined' ? genieacsOnline : '-' %></div>
                  </div>
                </div>
              </div>
              <div class="col-md-4 mb-3">
                <div class="card text-bg-danger">
                  <div class="card-body text-center">
                    <i class="bi bi-wifi-off fs-2 mb-2"></i>
                    <div class="fw-bold">Device Offline</div>
                    <div class="fs-3" id="genieacs-offline"><%= typeof genieacsOffline !== 'undefined' ? genieacsOffline : '-' %></div>
                  </div>
                </div>
              </div>
            </div>
            <!-- MIKROTIK CARDS -->
            <div class="row mb-4">
              <div class="col-md-4 mb-3">
                <div class="card text-bg-secondary">
                  <div class="card-body text-center">
                    <i class="bi bi-person-badge fs-2 mb-2"></i>
                    <div class="fw-bold">Total User PPPoE</div>
                    <div class="fs-3" id="mikrotik-total"><%= typeof mikrotikTotal !== 'undefined' ? mikrotikTotal : '-' %></div>
                  </div>
                </div>
              </div>
              <div class="col-md-4 mb-3">
                <div class="card text-bg-success">
                  <div class="card-body text-center">
                    <i class="bi bi-person-check fs-2 mb-2"></i>
                    <div class="fw-bold">PPPoE Aktif</div>
                    <div class="fs-3" id="mikrotik-aktif"><%= typeof mikrotikAktif !== 'undefined' ? mikrotikAktif : '-' %></div>
                  </div>
                </div>
              </div>
              <div class="col-md-4 mb-3">
                <div class="card text-bg-danger">
                  <div class="card-body text-center">
                    <i class="bi bi-person-x fs-2 mb-2"></i>
                    <div class="fw-bold">PPPoE Offline</div>
                    <div class="fs-3" id="mikrotik-offline"><%= typeof mikrotikOffline !== 'undefined' ? mikrotikOffline : '-' %></div>
                  </div>
                </div>
              </div>
            </div>
            <!-- GRAFIK INTERNET -->
            <div class="row mb-4">
              <div class="col-md-12">
                <div class="card text-bg-info">
                  <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                      <div class="fw-bold" style="font-size: 1.1rem;"><i class="bi bi-graph-up-arrow"></i> Grafik Traffic Internet - <span id="currentInterface">Ether1</span></div>
                      <div class="d-flex align-items-center">
                        <label for="interfaceSelect" class="form-label me-2 mb-0" style="font-size: 0.9rem;">Interface:</label>
                        <select id="interfaceSelect" class="form-select form-select-sm" style="width: auto; font-size: 0.9rem;">
                          <option value="ether1-ISP">Ether1-ISP (ISP)</option>
                          <!-- Interface akan di-load secara dinamis -->
                        </select>
                      </div>
                    </div>
                    
                    <!-- Real-time bandwidth info dengan color scheme yang sesuai chart -->
                    <div class="row mb-2">
                      <div class="col-md-3">
                        <div class="card text-white" style="background: linear-gradient(135deg, #36a2eb 0%, #1e88e5 100%); border: none; box-shadow: 0 4px 8px rgba(54, 162, 235, 0.3);">
                          <div class="card-body text-center py-2">
                            <div class="d-flex align-items-center justify-content-center mb-1">
                              <i class="bi bi-download" style="font-size: 1.1rem; margin-right: 6px;"></i>
                              <small class="fw-bold" style="font-size: 0.8rem; letter-spacing: 0.5px;">DOWNLOAD (RX)</small>
                            </div>
                            <div id="currentRx" style="font-size: 1.2rem; font-weight: 700; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">0 Mbps</div>
                          </div>
                        </div>
                      </div>
                      <div class="col-md-3">
                        <div class="card text-white" style="background: linear-gradient(135deg, #ff6384 0%, #e91e63 100%); border: none; box-shadow: 0 4px 8px rgba(255, 99, 132, 0.3);">
                          <div class="card-body text-center py-2">
                            <div class="d-flex align-items-center justify-content-center mb-1">
                              <i class="bi bi-upload" style="font-size: 1.1rem; margin-right: 6px;"></i>
                              <small class="fw-bold" style="font-size: 0.8rem; letter-spacing: 0.5px;">UPLOAD (TX)</small>
                            </div>
                            <div id="currentTx" style="font-size: 1.2rem; font-weight: 700; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">0 Mbps</div>
                          </div>
                        </div>
                      </div>
                      <div class="col-md-3">
                        <div class="card text-white" style="background: linear-gradient(135deg, #17a2b8 0%, #138496 100%); border: none; box-shadow: 0 4px 8px rgba(23, 162, 184, 0.3);">
                          <div class="card-body text-center py-2">
                            <div class="d-flex align-items-center justify-content-center mb-1">
                              <i class="bi bi-speedometer2" style="font-size: 1.1rem; margin-right: 6px;"></i>
                              <small class="fw-bold" style="font-size: 0.8rem; letter-spacing: 0.5px;">TOTAL TRAFFIC</small>
                            </div>
                            <div id="currentTotal" style="font-size: 1.2rem; font-weight: 700; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">0 Mbps</div>
                          </div>
                        </div>
                      </div>
                      <div class="col-md-3">
                        <div class="card text-white" style="background: linear-gradient(135deg, #6c757d 0%, #495057 100%); border: none; box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);">
                          <div class="card-body text-center py-2">
                            <div class="d-flex align-items-center justify-content-center mb-1">
                              <i class="bi bi-activity" style="font-size: 1.1rem; margin-right: 6px;"></i>
                              <small class="fw-bold" style="font-size: 0.8rem; letter-spacing: 0.5px;">NETWORK STATUS</small>
                            </div>
                            <div id="currentStatus" style="font-size: 1.2rem; font-weight: 700; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">Idle</div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div style="height: 300px;">
                      <canvas id="internetChart"></canvas>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
            <script>
            // Grafik bandwidth real-time dengan dukungan Gbps
const ctx = document.getElementById('internetChart').getContext('2d');
const maxPoints = 30; // tampilkan 30 data terakhir
let currentInterface = localStorage.getItem('selectedInterface') || 'ether1-ISP'; // Ambil dari localStorage atau default sesuai settings.json
let currentUnit = 'Mbps'; // Unit aktif: bps, Kbps, Mbps, Gbps

// Fungsi untuk konversi unit bandwidth
function formatBandwidth(bytesPerSecond, isTotal = false) {
  const bps = bytesPerSecond;
  const kbps = bps / 1000;
  const mbps = bps / 1000000;
  const gbps = bps / 1000000000;
  
  if (isTotal) {
    // Untuk TOTAL TRAFFIC - format yang lebih ringkas
    if (gbps >= 10) {
      return { value: gbps.toFixed(0), unit: 'Gbps' }; // Tanpa desimal untuk > 10 Gbps
    } else if (gbps >= 1) {
      return { value: gbps.toFixed(1), unit: 'Gbps' }; // 1 desimal untuk 1-10 Gbps
    } else if (mbps >= 100) {
      return { value: mbps.toFixed(0), unit: 'Mbps' }; // Tanpa desimal untuk > 100 Mbps
    } else if (mbps >= 1) {
      return { value: mbps.toFixed(1), unit: 'Mbps' }; // 1 desimal untuk 1-100 Mbps
    } else if (kbps >= 1) {
      return { value: kbps.toFixed(0), unit: 'Kbps' }; // Tanpa desimal untuk Kbps
    } else {
      return { value: bps.toFixed(0), unit: 'bps' };
    }
  } else {
    // Untuk RX/TX individual - format asli yang sudah benar
    if (gbps >= 1) {
      return { value: gbps.toFixed(3), unit: 'Gbps' };
    } else if (mbps >= 1) {
      return { value: mbps.toFixed(2), unit: 'Mbps' };
    } else if (kbps >= 1) {
      return { value: kbps.toFixed(1), unit: 'Kbps' };
    } else {
      return { value: bps.toFixed(0), unit: 'bps' };
    }
  }
}

// Fungsi untuk mendapatkan nilai dalam unit yang konsisten untuk chart
function getValueInUnit(bytesPerSecond, targetUnit) {
  switch (targetUnit) {
    case 'Gbps': return bytesPerSecond / 1000000000;
    case 'Mbps': return bytesPerSecond / 1000000;
    case 'Kbps': return bytesPerSecond / 1000;
    default: return bytesPerSecond;
  }
}

// Fungsi untuk menentukan unit optimal berdasarkan nilai maksimum
function determineOptimalUnit(maxValue) {
  if (maxValue >= 1000000000) return 'Gbps';
  if (maxValue >= 1000000) return 'Mbps';
  if (maxValue >= 1000) return 'Kbps';
  return 'bps';
}

let chart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: [],
    datasets: [
      {
        label: 'RX (Download)',
        data: [],
        fill: true,
        backgroundColor: 'rgba(54, 162, 235, 0.15)', // Blue dengan transparansi lebih rendah
        borderColor: 'rgba(54, 162, 235, 1)', // Blue solid
        borderWidth: 3,
        tension: 0.4,
        pointBackgroundColor: 'rgba(54, 162, 235, 1)',
        pointBorderColor: '#ffffff',
        pointBorderWidth: 2,
        pointRadius: 3,
        pointHoverRadius: 6
      },
      {
        label: 'TX (Upload)',
        data: [],
        fill: true,
        backgroundColor: 'rgba(255, 99, 132, 0.15)', // Red dengan transparansi lebih rendah
        borderColor: 'rgba(255, 99, 132, 1)', // Red solid
        borderWidth: 3,
        tension: 0.4,
        pointBackgroundColor: 'rgba(255, 99, 132, 1)',
        pointBorderColor: '#ffffff',
        pointBorderWidth: 2,
        pointRadius: 3,
        pointHoverRadius: 6
      }
    ]
  },
  options: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { 
      legend: { 
        display: true,
        position: 'top',
        labels: {
          padding: 15,
          usePointStyle: true,
          pointStyle: 'line',
          font: {
            size: 12,
            weight: 'bold'
          }
        }
      },
      tooltip: {
        mode: 'index',
        intersect: false,
        backgroundColor: 'rgba(0,0,0,0.9)',
        titleColor: 'white',
        bodyColor: 'white',
        borderColor: 'rgba(255,255,255,0.3)',
        borderWidth: 1,
        cornerRadius: 8,
        titleFont: {
          size: 13,
          weight: 'bold'
        },
        bodyFont: {
          size: 12
        },
        callbacks: {
          label: function(context) {
            const value = context.parsed.y;
            const multiplier = currentUnit === 'Gbps' ? 1000000000 : currentUnit === 'Mbps' ? 1000000 : currentUnit === 'Kbps' ? 1000 : 1;
            const bytesPerSecond = value * multiplier;
            const formatted = formatBandwidth(bytesPerSecond); // Format asli untuk tooltip
            return context.dataset.label + ': ' + formatted.value + ' ' + formatted.unit;
          }
        }
      }
    },
    scales: { 
      y: { 
        beginAtZero: true,
        title: {
          display: true,
          text: 'Bandwidth (' + currentUnit + ')',
          font: {
            size: 13,
            weight: 'bold'
          },
          color: 'rgba(0,0,0,0.8)'
        },
        ticks: {
          callback: function(value) {
            if (currentUnit === 'Gbps') {
              return value.toFixed(3) + ' Gbps';
            } else if (currentUnit === 'Mbps') {
              return value.toFixed(1) + ' Mbps';
            } else if (currentUnit === 'Kbps') {
              return value.toFixed(0) + ' Kbps';
            } else {
              return value.toFixed(0) + ' bps';
            }
          },
          font: {
            size: 10
          },
          maxTicksLimit: 8
        },
        grid: {
          color: 'rgba(0,0,0,0.1)',
          drawBorder: false
        }
      },
      x: {
        title: {
          display: true,
          text: 'Time (Real-time)',
          font: {
            size: 13,
            weight: 'bold'
          },
          color: 'rgba(0,0,0,0.8)'
        },
        ticks: {
          font: {
            size: 10
          },
          maxTicksLimit: 8
        },
        grid: {
          color: 'rgba(0,0,0,0.1)',
          drawBorder: false
        }
      }
    },
    interaction: {
      mode: 'nearest',
      axis: 'x',
      intersect: false
    },
    elements: {
      point: {
        radius: 3,
        hoverRadius: 6,
        borderWidth: 2
      },
      line: {
        borderWidth: 3
      }
    },
    animation: {
      duration: 750,
      easing: 'easeInOutQuart'
    }
  }
});

function addTrafficData(rx, tx, interface) {
  const now = new Date();
  const label = now.toLocaleTimeString('id-ID', { hour12: false });
  
  // Tentukan unit optimal berdasarkan nilai maksimum RX/TX (bukan total)
  const maxCurrentValue = Math.max(rx, tx);
  const optimalUnit = determineOptimalUnit(maxCurrentValue);
  
  // Update unit chart jika berubah
  if (optimalUnit !== currentUnit) {
    currentUnit = optimalUnit;
    chart.options.scales.y.title.text = 'Bandwidth (' + currentUnit + ')';
    
    // Convert existing data ke unit baru
    const multiplier = currentUnit === 'Gbps' ? 1000000000 : currentUnit === 'Mbps' ? 1000000 : currentUnit === 'Kbps' ? 1000 : 1;
    chart.data.datasets[0].data = chart.data.datasets[0].data.map(value => {
      const bytesPerSecond = value * multiplier;
      return getValueInUnit(bytesPerSecond, currentUnit);
    });
    chart.data.datasets[1].data = chart.data.datasets[1].data.map(value => {
      const bytesPerSecond = value * multiplier;
      return getValueInUnit(bytesPerSecond, currentUnit);
    });
  }
  
  // Format nilai untuk tampilan real-time
  const rxFormatted = formatBandwidth(rx); // RX dengan format asli yang sudah benar
  const txFormatted = formatBandwidth(tx); // TX dengan format asli yang sudah benar
  
  // Hitung TOTAL dengan logic yang benar - konversi RX dan TX ke unit yang sama dulu
  const rxMbps = rx / 1000000; // Konversi RX ke Mbps
  const txMbps = tx / 1000000; // Konversi TX ke Mbps
  const totalMbps = rxMbps + txMbps; // Jumlahkan dalam Mbps
  
  // Format total dengan logic sederhana
  let totalFormatted;
  if (totalMbps >= 1000) {
    // Jika > 1000 Mbps, tampilkan sebagai Gbps
    totalFormatted = { value: (totalMbps / 1000).toFixed(1), unit: 'Gbps' };
  } else if (totalMbps >= 100) {
    // Jika 100-1000 Mbps, tampilkan tanpa desimal
    totalFormatted = { value: totalMbps.toFixed(0), unit: 'Mbps' };
  } else if (totalMbps >= 1) {
    // Jika 1-100 Mbps, tampilkan dengan 1 desimal
    totalFormatted = { value: totalMbps.toFixed(1), unit: 'Mbps' };
  } else {
    // Jika < 1 Mbps, tampilkan sebagai Kbps
    const totalKbps = totalMbps * 1000;
    totalFormatted = { value: totalKbps.toFixed(0), unit: 'Kbps' };
  }
  
  // Update real-time info dengan unit yang sesuai
  document.getElementById('currentRx').innerHTML = `<span style="color: #36a2eb; font-weight: bold;">${rxFormatted.value}</span> <small>${rxFormatted.unit}</small>`;
  document.getElementById('currentTx').innerHTML = `<span style="color: #ff6384; font-weight: bold;">${txFormatted.value}</span> <small>${txFormatted.unit}</small>`;
  document.getElementById('currentTotal').innerHTML = `<span style="font-weight: bold;">${totalFormatted.value}</span> <small>${totalFormatted.unit}</small>`;
  
  // Update status berdasarkan traffic total (dalam Mbps untuk konsistensi)
  const statusElement = document.getElementById('currentStatus');
  
  if (totalMbps > 100) { // > 100 Mbps
    statusElement.textContent = 'Very High';
    statusElement.parentElement.parentElement.style.background = 'linear-gradient(135deg, #dc3545 0%, #c82333 100%)';
  } else if (totalMbps > 50) { // > 50 Mbps
    statusElement.textContent = 'High';
    statusElement.parentElement.parentElement.style.background = 'linear-gradient(135deg, #fd7e14 0%, #e55a00 100%)';
  } else if (totalMbps > 10) { // > 10 Mbps
    statusElement.textContent = 'Medium';
    statusElement.parentElement.parentElement.style.background = 'linear-gradient(135deg, #17a2b8 0%, #138496 100%)';
  } else if (totalMbps > 1) { // > 1 Mbps
    statusElement.textContent = 'Low';
    statusElement.parentElement.parentElement.style.background = 'linear-gradient(135deg, #28a745 0%, #1e7e34 100%)';
  } else {
    statusElement.textContent = 'Idle';
    statusElement.parentElement.parentElement.style.background = 'linear-gradient(135deg, #6c757d 0%, #495057 100%)';
  }
  
  // Konversi nilai ke unit chart yang aktif
  const rxChartValue = getValueInUnit(rx, currentUnit);
  const txChartValue = getValueInUnit(tx, currentUnit);
  
  // Update chart
  if (chart.data.labels.length >= maxPoints) {
    chart.data.labels.shift();
    chart.data.datasets[0].data.shift();
    chart.data.datasets[1].data.shift();
  }
  
  chart.data.labels.push(label);
  chart.data.datasets[0].data.push(rxChartValue);
  chart.data.datasets[1].data.push(txChartValue);
  
  // Update chart dengan animasi smooth
  chart.update('none'); // 'none' untuk update tanpa animasi untuk performa yang lebih baik
}

function resetChart() {
  // Reset chart data ketika interface berubah
  chart.data.labels = [];
  chart.data.datasets[0].data = [];
  chart.data.datasets[1].data = [];
  
  // Reset unit ke Mbps default
  currentUnit = 'Mbps';
  chart.options.scales.y.title.text = 'Bandwidth (Mbps)';
  
  // Reset real-time info dengan format yang konsisten
  document.getElementById('currentRx').innerHTML = '<span style="color: #36a2eb; font-weight: bold;">0.00</span> <small>Mbps</small>';
  document.getElementById('currentTx').innerHTML = '<span style="color: #ff6384; font-weight: bold;">0.00</span> <small>Mbps</small>';
  document.getElementById('currentTotal').innerHTML = '<span style="font-weight: bold;">0.0</span> <small>Mbps</small>';
  
  // Reset status
  const statusElement = document.getElementById('currentStatus');
  statusElement.textContent = 'Idle';
  statusElement.parentElement.parentElement.style.background = 'linear-gradient(135deg, #6c757d 0%, #495057 100%)';
  
  chart.update();
}

async function fetchTraffic() {
  try {
    const res = await fetch(`/api/dashboard/traffic?interface=${currentInterface}`);
    const data = await res.json();
    if (data.success) {
      addTrafficData(data.rx, data.tx, data.interface);
    }
  } catch (e) { 
    console.error('Error fetching traffic data:', e);
  }
}

// Load interface secara dinamis dari Mikrotik
async function loadInterfaces() {
  try {
    console.log('🔄 Loading interfaces from Mikrotik...');
    const response = await fetch('/api/dashboard/interfaces');
    const data = await response.json();
    
    console.log('📋 API Response:', data);
    
    if (data.success && data.interfaces && data.interfaces.length > 0) {
      const select = document.getElementById('interfaceSelect');
      
      // Hapus semua option kecuali yang pertama (default)
      while (select.children.length > 1) {
        select.removeChild(select.lastChild);
      }
      
      // Tambahkan interface yang terdeteksi
      data.interfaces.forEach(iface => {
        const option = document.createElement('option');
        option.value = iface.name;
        
        // Buat label yang informatif
        let label = iface.name;
        
        // Tambahkan label khusus untuk interface tertentu
        if (iface.name === 'ether1-ISP') {
          label = 'ether1-ISP (ISP)';
        } else if (iface.name === 'ether2-CADANGAN ISP') {
          label = 'ether2-CADANGAN ISP (Backup)';
        } else if (iface.name === 'ether3-LOKAL') {
          label = 'ether3-LOKAL (Local)';
        } else if (iface.name === 'ether4-LOKAL-LEPTOP') {
          label = 'ether4-LOKAL-LEPTOP (Laptop)';
        } else if (iface.name === 'ether5-LOKAL-REMOT OLT') {
          label = 'ether5-LOKAL-REMOT OLT (Remote)';
        } else if (iface.name === 'ether6-OLT-SFP1-TANJUNGPURA') {
          label = 'ether6-OLT-SFP1-TANJUNGPURA (OLT1)';
        } else if (iface.name === 'ether7-OLT-SFP2-TANJUNGPURA2') {
          label = 'ether7-OLT-SFP2-TANJUNGPURA2 (OLT2)';
        } else if (iface.name === 'ether8-HOTSPOT-RADIO') {
          label = 'ether8-HOTSPOT-RADIO (Hotspot)';
        } else if (iface.name === 'ether9-HOTSPOT-SWICTHHUB') {
          label = 'ether9-HOTSPOT-SWICTHHUB (Switch)';
        } else if (iface.name === 'ether10-POP PEGAGAN/JANGGAR') {
          label = 'ether10-POP PEGAGAN/JANGGAR (POP)';
        } else if (iface.name === 'bridge1-HOTSPOT') {
          label = 'bridge1-HOTSPOT (Bridge)';
        } else if (iface.name === 'bridge2_OLT') {
          label = 'bridge2_OLT (Bridge OLT)';
        } else if (iface.name === 'vlan6-1100') {
          label = 'vlan6-1100 (VLAN)';
        }
        
        // Tambahkan status
        if (iface.disabled) {
          label += ' [Disabled]';
        } else if (!iface.running) {
          label += ' [Down]';
        } else {
          label += ' [Active]';
        }
        
        option.textContent = label;
        select.appendChild(option);
      });
      
      console.log(`✅ Loaded ${data.interfaces.length} interfaces from Mikrotik`);
      
      // Update current interface jika tidak ada di list
      const currentOption = select.querySelector(`option[value="${currentInterface}"]`);
      if (!currentOption && data.interfaces.length > 0) {
        currentInterface = data.interfaces[0].name;
        localStorage.setItem('selectedInterface', currentInterface);
        document.getElementById('currentInterface').textContent = currentInterface;
        select.value = currentInterface;
      }
      
    } else {
      console.warn('⚠️ Failed to load interfaces, using default options');
      console.warn('Response:', data);
    }
  } catch (error) {
    console.error('❌ Error loading interfaces:', error);
    console.error('Error details:', error.message);
  }
}

// Set interface yang tersimpan ke dropdown
document.getElementById('interfaceSelect').value = currentInterface;
document.getElementById('currentInterface').textContent = currentInterface;

// Event listener untuk perubahan interface
document.getElementById('interfaceSelect').addEventListener('change', function() {
  currentInterface = this.value;
  localStorage.setItem('selectedInterface', currentInterface); // Simpan ke localStorage
  document.getElementById('currentInterface').textContent = currentInterface; // Update tampilan
  console.log('Interface changed to:', currentInterface);
  resetChart();
  fetchTraffic(); // Fetch data baru segera
});

// Load interfaces saat halaman dimuat
loadInterfaces();

// Set interval untuk update data
setInterval(fetchTraffic, 2000);
fetchTraffic();
</script>
<script>
// Fungsi untuk me-refresh logo dengan timestamp baru
function refreshLogo() {
    const logo = document.getElementById('logoImage');
    if (logo) {
        // Tambahkan parameter timestamp baru untuk memaksa reload gambar
        const timestamp = new Date().getTime();
        const src = logo.src.split('?')[0]; // Hapus parameter yang ada
        logo.src = `${src}?v=${timestamp}`;
    }
}

// Refresh logo setiap 5 detik
setInterval(refreshLogo, 5000);

// Refresh logo saat halaman dimuat
document.addEventListener('DOMContentLoaded', function() {
    refreshLogo();
});
</script>
            </main>
    </div>
</div>
<!-- Modal Konfirmasi Restart Mikrotik -->
<div class="modal fade" id="restartMikrotikModal" tabindex="-1" aria-labelledby="restartMikrotikModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="restartMikrotikModalLabel"><i class="bi bi-arrow-repeat"></i> Konfirmasi Restart Mikrotik</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Apakah Anda yakin ingin <b>restart Mikrotik</b>?<br>Router akan reboot dan koneksi internet pelanggan akan terputus sementara.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
        <button type="button" class="btn btn-danger" id="confirmRestartMikrotik">Restart</button>
      </div>
    </div>
  </div>
</div>
<!-- Notifikasi -->
<div id="restartNotif" class="alert d-none position-fixed top-0 end-0 m-4" style="z-index:1055; min-width:300px;"></div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
$(function() {
  $(document).on('click', '#restartMikrotikBtn', function(e) {
    e.preventDefault();
    $('#restartMikrotikModal').modal('show');
  });
  $('#confirmRestartMikrotik').on('click', function() {
    $('#restartMikrotikModal').modal('hide');
    $.ajax({
      url: '/admin/mikrotik/restart',
      method: 'POST',
      success: function(res) {
        let notif = $('#restartNotif');
        if(res.success) {
          notif.removeClass('d-none alert-danger').addClass('alert-success').text(res.message || 'Mikrotik berhasil direstart!');
        } else {
          notif.removeClass('d-none alert-success').addClass('alert-danger').text(res.message || 'Gagal restart Mikrotik!');
        }
        setTimeout(function() { notif.addClass('d-none'); }, 4000);
      },
      error: function() {
        let notif = $('#restartNotif');
        notif.removeClass('d-none alert-success').addClass('alert-danger').text('Gagal menghubungi server!');
        setTimeout(function() { notif.addClass('d-none'); }, 4000);
      }
    });
  });
});
</script>

</body>
</html>
